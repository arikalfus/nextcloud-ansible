---

- name: Nginx | Install package
  become: yes
  package:
    name: "{{ nginx_package }}"
    state: latest

- name: Nginx | Ensure groups
  become: yes
  group:
    name: nginx
    state: present

- name: Nginx | Ensure user
  become: yes
  user:
    name: nginx
    group: nginx
    password: "{{ nginx_user_pass | hash('sha512') }}"
    state: present

- name: Nginx | Ensure SSL directory
  become: yes
  file:
    path: /etc/nginx/ssl
    owner: root
    group: root
    state: directory

- name: Nginx | Check for local ECDH params
  become: no
  local_action: stat path="files/secrets/nginx/ecdhparam.pem"
  register: ecdh_params

- name: Nginx | Ensure ECDH params
  become: yes
  copy:
    src: ../files/secrets/nginx/ecdhparam.pem
    dest: /etc/nginx/ssl/ecdhparam.pem
    owner: root
    group: root
    mode: 0644
  when: ecdh_params.stat.exists

- name: Nginx | Ensure FastCGI params
  become: yes
  copy:
    src: ../files/nginx/fastcgi_params
    dest: /etc/nginx/fastcgi_params
    owner: nginx
    group: nginx
    mode: 0644
  notify: Nginx Reload

- name: Nginx | Remove default site
  become: yes
  file:
    path: /etc/nginx/conf.d/default.conf
    state: absent
  notify: Nginx Reload

- name: Nginx | Remove the provided example_ssl.conf file
  become: yes
  file:
    path: /etc/nginx/conf.d/example_ssl.conf
    state: absent
  notify: Nginx Reload

- name: Nginx | Self-Signed - Generate certificate
  become: yes
  command: openssl req -x509 -new -newkey ec -pkeyopt ec_paramgen_curve:prime256v1 -nodes -days 3650 -keyout /etc/nginx/ssl/nextcloud-self.key -out /etc/nginx/ssl/nextcloud-self.crt -subj "/C={{ csr_country }}/ST={{ csr_state }}/L={{ csr_locality }}/O={{ csr_organization }}/OU={{ csr_organizational_unit }}/emailAddress={{ email }}"
  args:
    creates: /etc/nginx/ssl/nextcloud-self.crt
  notify: Nginx Reload

- name: Nginx | Stats on Certbot certificate
  become: yes
  stat:
    path: /etc/letsencrypt/live/{{ server_domain }}/fullchain.pem
  register: certbot_cert
  when: server_domain is defined

- name: Nginx | Copy Nginx configuration
  become: yes
  template:
    src: ../files/nginx/nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: nginx
    group: nginx
    mode: 0644
  notify: Nginx Reload

- name: Nginx | Start service
  become: yes
  systemd:
    name: nginx
    enabled: yes
    state: started

- name: Nginx | Enable stretch backports
  become: yes
  lineinfile:
    path: /etc/apt/sources.list
    line: "deb http://ftp.debian.org/debian {{ ansible_distribution_release }}-backports main"
    state: present
  when: server_domain is defined and (ansible_distribution == "Ubuntu" or ansible_distribution == "Debian")

- name: Nginx | Install Certbot packages
  become: yes
  command: yum-config-manager --enable {{ item }}
  with_items:
    - rhui-REGION-rhel-server-extras 
    - rhui-REGION-rhel-server-optional
  when: server_domain is defined and (ansible_distribution == "CentOS" or ansible_distribution == "RedHat")
  changed_when: false

- name: Nginx | Install Certbot
  become: yes
  package:
    name: "{{ certbot_package }}"
    state: latest
  when: server_domain is defined

- name: Nginx | Install staging certificate
  become: yes
  command: certbot --staging --nginx certonly --email "{{ email }}" --agree-tos --domains "{{ server_domain }}" --non-interactive
  args:
    creates: /etc/letsencrypt/live/{{ server_domain }}/fullchain.pem
  when: staging and server_domain is defined
  notify: Nginx Reload

- name: Nginx | Install certificate
  become: yes
  command: certbot --nginx certonly --email "{{ email }}" --agree-tos --domains "{{ server_domain }}" --non-interactive
  args:
    creates: /etc/letsencrypt/live/{{ server_domain }}/fullchain.pem
  when: not staging and server_domain is defined
  notify: Nginx Reload

- name: Nginx | Reload stats on Certbot certificate
  become: yes
  stat:
    path: /etc/letsencrypt/live/{{ server_domain }}/fullchain.pem
  register: certbot_cert
  when: server_domain is defined

- name: Nginx | Reload Nginx configuration
  become: yes
  template:
    src: ../files/nginx/nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: nginx
    group: nginx
    mode: 0644
  notify: Nginx Reload

- name: Nginx | Ensure cron directory
  become: yes
  file:
    path: /opt/cron
    state: directory

- name: Nginx | Copy certificate renewal script
  become: yes
  copy:
    src: ../files/nginx/cert_renewal.sh
    dest: /opt/cron/cert_renewal.sh
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  when: server_domain is defined

- name: Nginx | Schedule certificate renewal cron
  become: yes
  lineinfile:
    dest: /etc/cron.d/cert_renewal
    line: '43 8,20 * * * root bash /opt/cron/cert_renewal.sh'
    state: present
    create: yes
  when: server_domain is defined
